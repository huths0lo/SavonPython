from incap_cracker_py3.incap_session import IncapSession
import json
import random
import time



user_agent = None





USER_AGENT_LIST = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15'
    '"Brave";v="119", "Chromium";v="119", "Not?A_Brand";v="24"'
    ]

def set_random_user_agent():
    global user_agent
    user_agent = random.choice(USER_AGENT_LIST)
    return user_agent

def find_incap_ses_cookie(cookies):
    incap_full, incap_key, incap_value = None, None, None
    cookie_strings = str(cookies).split()
    for item in cookie_strings:
        if item[:10] == 'incap_ses_':
            incap_full = item
            break
    #i = 0
    if incap_full is not None:
        for character in incap_full:
            if character == '=':
                break
            #i += 1
        incap_key = incap_full[:21]
        incap_value = incap_full[22:]
    return [incap_key, incap_value]


def get_incapsula_resource_url(phase_one_response, url='https://www.vons.com'):
    # Try to find specific url in session text
    found = False
    for item in phase_one_response.text.split():
        if '_Incapsula_Resource' in item:
            resource_url = item[6:-1]
            print('Found resource url')
            found = True
    if not found:
        print('Resource URL not found.  Generating random url.')
        rdm = random.random()
        resource_url = url + f'/_Incapsula_Resource?CWUDNSAI=1&e={rdm}'
    return resource_url


def phase_one():
    # Create session, and bypass incapsula.
    session = IncapSession()
    session.headers = {
        'upgrade-insecure-requests': '1',
        'user-agent': user_agent,
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'sec-gpc': '1',
        'sec-fetch-site': 'none',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'document',
        'sec-ch-ua': user_agent,
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'accept-encoding': 'gzip, deflate, br' 'accept-language: en-US,en;q=0.9'
    }
    phase_one_response = session.get('https://www.vons.com')
    cookie_visid_incap = ['visid_incap_1610354', session.cookies.get('visid_incap_1610354')]
    cookie_nlbi = ['nlbi_1610354', session.cookies.get('nlbi_1610354')]
    cookie_incap_ses = find_incap_ses_cookie(session.cookies)
    return session, phase_one_response, cookie_visid_incap, cookie_nlbi, cookie_incap_ses








def phase_two(session):
    # initiate call to Okta
    url = 'https://albertsons.okta.com/api/v1/sessions/me/lifecycle/refresh'
    headers = {
        'content-length': '0',
        'sec-ch-ua': user_agent,
        'accept': '*/*',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'origin': 'https://www.vons.com',
        'sec-fetch-site': 'cross-site',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': 'https://www.vons.com/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    phase_two_response = session.post(url=url, headers=headers)
    return session, phase_two_response


def phase_three(session, phase_one_response):
    # Finish Incapsula
    resource_url=get_incapsula_resource_url(phase_one_response)
    url = 'https://www.vons.com/' + resource_url
    session.headers = {
        'sec-ch-ua': user_agent,
        'accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'no-cors',
        'sec-fetch-dest': 'image',
        'referer': 'https://www.vons.com',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    phase_three_response = session.get(url, True)
    return session, phase_three_response



def phase_four(session):
    # Get user cookie
    url = 'https://www.vons.com/bin/safeway/unified/userinfo?rand=101454&banner=vons'
    session.headers = {
        'sec-ch-ua': user_agent,
        'accept': '*/*',
        'x-requested-with': 'XMLHttpRequest',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': 'https://www.vons.com',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    phase_four_response = session.get(url)
    return session, phase_four_response

def phase_five(session):
    # Complete Okta
    url = 'https://albertsons.okta.com/oauth2/ausp6soxrIyPrm8rS2p6/v1/authorize?client_id=0oap6ku01XJqIRdl42p6&redirect_uri=https://www.vons.com/bin/safeway/unified/sso/authorize&response_type=code&response_mode=query&state=joyous-boy-camden-obeisant&nonce=ovJgrUobDYQKhiownVT9jU1GvtkRdpC4Eoyal2SfgGu6ezXG5b03393l08xbDGw8&scope=openid%20profile%20email%20offline_access%20used_credentials&sessionToken=20111p7BWShOmlAIP3XQBvNTSz207eTAoPEozE9inKzjwNqKe_tJbnK'
    session.headers = {
        'sec-ch-ua': user_agent,
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'cross-site',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'document',
        'referer': 'https://www.vons.com',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    phase_five_response = session.get(url)
    return session, phase_five_response

def phase_six(session):
    # Complete Okta
    url = 'https://www.vons.com/bin/safeway/unified/sso/authorize?code=_Q16nrSgJiGznZFxndq_B5loXJ0hW2wysXrs8ho8u6o&state=joyous-boy-camden-obeisant'
    session.headers = {
        'upgrade-insecure-requests': '1',
        'sec-ch-ua': user_agent,
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'cross-site',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'document',
        'referer': 'https://www.vons.com',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    phase_six_response = session.get(url, True)
    return session, phase_six_response


def get_token(session):
    payload = {"solution":{"interrogation":{"p":"","st":1701900044,"sr":1760113243,"cr":838392674,"og":1},"version":"beta"},"old_token":None,"error":None,"performance":{"interrogation":4197}}
    url = 'https://www.vons.com/ueene-suffe-and-swort-it-know-tenda-Enter-I-dist?d=www.vons.com'
    headers = {
        'upgrade-insecure-requests': '1',
        'sec-ch-ua': user_agent,
        'accept': 'application/json; charset=utf-8',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'content-type': 'text/plain; charset=utf-8',
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'empty',
        'referer': 'https://www.vons.com/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    get_token_response = session.post(url, json=payload, headers=headers)
    return_payload = json.loads(get_token_response.text)
    token, renew = return_payload['token'], return_payload['renewInSec']
    expires = renew + int(time.time())
    session.cookies.set(name='reese84', value=token, expires=expires)
    return session, get_token_response

def post_username(username, session):
    payload = {
    "context": {
        "deviceToken": "8910a6272e41b85fb9c76add15ec89a1"
    },
    "userId": username
    }
    url = 'https://www.vons.com/abs/pub/cnc/csmsservice/api/csms/authn'
    session.headers = {
        'x-aci-user-hash': '425bb68859e7210a501ee243e9bc46705a30e366bfb3356559f743a551d8fcf1',
        'x-swy-correlation-id': '079627d8-7720-4c63-aa2f-cae3d7290da2',
        'x-swy-date': 'Wed, 06 Dec 2023 22:03:34 GMT',
        'x-swy-client-id': 'web-portal',
        'x-swy-banner': 'vons',
        'upgrade-insecure-requests': '1',
        'ocp-apim-subscription-key': '9e38e3f1d32a4279a49a264e0831ea46',
        'sec-ch-ua': user_agent,
        'accept': 'application/vnd.safeway.v1+json',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'content-type': 'application/vnd.safeway.v1+json',
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'document',
        'referer': 'https://www.vons.com/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    post_user_response = session.post(url, json=payload)
    return_payload = json.loads(post_user_response.text)
    state_token, okta_id = return_payload['stateToken'], return_payload['oktaId']
    return session, post_user_response, state_token, okta_id

def post_password(password, state_token, okta_id, session):
    payload = {
    "passCode": password,
    "stateToken": state_token
    }
    url = f'https://www.vons.com/abs/pub/cnc/csmsservice/api/csms/authn/factors/password/okta/{okta_id}/verify'
    session.headers = {
        'x-swy-correlation-id': '0f1745d4-f933-439b-bdb8-145f59945c7f',
        'x-swy-date': 'Wed, 06 Dec 2023 23:17:55 GMT',
        'x-swy-client-id': 'web-portal',
        'x-swy-banner': 'vons',
        'upgrade-insecure-requests': '1',
        'ocp-apim-subscription-key': '9e38e3f1d32a4279a49a264e0831ea46',
        'sec-ch-ua': user_agent,
        'accept': 'application/vnd.safeway.v1+json',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'content-type': 'application/vnd.safeway.v1+json',
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'empty',
        'origin': 'https://www.vons.com',
        'referer': 'https://www.vons.com/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    post_password_response = session.post(url, json=payload)
    return_payload = json.loads(post_password_response.text)
    okta_session, okta_id = return_payload['sessionToken'], return_payload['oktaId']
    return session, post_password_response, okta_session, okta_id


def post_okta_auth(okta_session, session):
    url = f'https://albertsons.okta.com/oauth2/ausp6soxrIyPrm8rS2p6/v1/authorize?client_id=0oap6ku01XJqIRdl42p6&redirect_uri=https://www.vons.com/bin/safeway/unified/sso/authorize&response_type=code&response_mode=query&state=damp-education-orono-dry&nonce=ovJgrUobDYQKhiownVT9jU1GvtkRdpC4Eoyal2SfgGu6ezXG5b03393l08xbDGw8&scope=openid%20profile%20email%20offline_access%20used_credentials&sessionToken={okta_session}'
    session.headers = {
        'upgrade-insecure-requests': '1',
        'sec-ch-ua': user_agent,
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'sec-fetch-site': 'cross-site',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-user': '?1',
        'sec-fetch-dest': 'document',
        'referer': 'https://www.vons.com/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    post_okta_response = session.get(url, True)
    return session, post_okta_response

def final_refresh(session):
    url = 'https://albertsons.okta.com/api/v1/sessions/me/lifecycle/refresh'
    headers = {
        'content-length': '0',
        'sec-ch-ua': user_agent,
        'accept': '*/*',
        'sec-ch-ua-mobile': '?0',
        'user-agent': user_agent,
        'sec-ch-ua-platform': '"Windows"',
        'sec-gpc': '1',
        'origin': 'https://www.vons.com',
        'sec-fetch-site': 'cross-site',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': 'https://www.vons.com/',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9'
    }
    final_refresh_response = session.post(url=url, headers=headers)
    return session, final_refresh_response



def run_logon(username, password):
    phase_one_session, phase_one_response, cookie_visid_incap, cookie_nlbi, cookie_incap_ses = phase_one()
    phase_two_session, phase_two_response = phase_two(phase_one_session)
    phase_three_session, phase_three_response = phase_three(phase_two_session, phase_one_response)
    phase_four_session, phase_four_response = phase_four(phase_three_session)
    phase_five_session, phase_five_response = phase_five(phase_four_session)
    phase_six_session, phase_six_response = phase_six(phase_five_session)
    get_token_session, get_token_response = get_token(phase_six_session)
    post_user_session, post_user_response, state_token, okta_id = post_username(username, get_token_session)
    post_password_session, post_password_response, okta_session, okta_id = post_password(password, state_token, okta_id, post_user_session)
    post_okta_session, post_okta_response = post_okta_auth(okta_session, post_password_session)
    final_refresh_session, final_refresh_response = final_refresh(post_okta_session)
    return final_refresh_session, final_refresh_response

#final_refresh_session, final_refresh_response = run_logon(username, password)